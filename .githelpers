#!/bin/bash
# vim: ft=sh

HASH="%C(yellow)%h%Creset"
RELATIVE_TIME="%C(green)%ar%Creset"
AUTHOR="%C(blue)%an%Creset"
REFS="%C(red)%d%Creset"
SUBJECT="%s"

FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"

show_git_head() {
   pretty_git_log -1
   git show -p --pretty="tformat:"
}

pretty_git_log() {
   git log --abbrev-commit --decorate --date=relative --pretty="tformat:${FORMAT}" $* |
      sed -Ee 's/(second[s]?|minute[s]?|hour[s]?|day[s]?|week[s]?|month[s]?|year[s]?) ago/\1/' |
      sed -Ee 's/\*[[:space:]]+/▪ /g' |
      # Line columns up based on } delimiter
      column -s '}' -t |
      # Page only if we need to
      less -FXRS
}

pretty_git_merges() {
   git log --merges --abbrev-commit --decorate --date=relative --pretty="tformat:${FORMAT}" $* |
      sed -Ee 's/(second[s]?|minute[s]?|hour[s]?|day[s]?|week[s]?|month[s]?|year[s]?) ago/\1/' |
      sed -Ee 's/\*[[:space:]]+/▪ /g' |
      sed -Ee '/Merge( remote.tracking)? branch/d' |
      # Line columns up based on } delimiter
      column -s '}' -t |
      # Page only if we need to
      less -FXRS
}

what_the_commit() {
   git ci -m "`curl -s http://whatthecommit.com | grep '<p>' | cut -d\> -f2`"
   git push
}

list_most_frequently_touched_files() {
   git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort -n
}

find_in_revisions() {
   git rev-list --all | (
      while read revision; do
         git grep -F $1 $revision
      done
   )
}

review() {
   local SHA=${1:-HEAD}
   local BRANCH=${2:-master}

   if [ $SHA == $BRANCH ]; then
      SHA=HEAD
   fi
   echo $BRANCH
   echo $SHA

   git dt -y $BRANCH...$SHA
}
